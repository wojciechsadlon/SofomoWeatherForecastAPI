// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SofomoWeatherForecastAPI.Data;

#nullable disable

namespace SofomoWeatherForecastAPI.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20241117130253_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SofomoWeatherForecastAPI.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SofomoWeatherForecastAPI.Entities.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double?>("RainSum")
                        .HasColumnType("float");

                    b.Property<double?>("TemperatureMax")
                        .HasColumnType("float");

                    b.Property<double?>("TemperatureMin")
                        .HasColumnType("float");

                    b.Property<int?>("WeatherForecastUnitId")
                        .HasColumnType("int");

                    b.Property<double?>("WindSpeedMax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("WeatherForecastUnitId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("SofomoWeatherForecastAPI.Entities.WeatherForecastUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RainSum")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Temperature2mMax")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Temperature2mMin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WindSpeed10mMax")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Temperature2mMax", "Temperature2mMin", "RainSum", "WindSpeed10mMax")
                        .IsUnique();

                    b.ToTable("WeatherForecastUnits");
                });

            modelBuilder.Entity("SofomoWeatherForecastAPI.Entities.WeatherForecast", b =>
                {
                    b.HasOne("SofomoWeatherForecastAPI.Entities.Location", "Location")
                        .WithMany("WeatherForecasts")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SofomoWeatherForecastAPI.Entities.WeatherForecastUnit", "WeatherForecastUnit")
                        .WithMany()
                        .HasForeignKey("WeatherForecastUnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Location");

                    b.Navigation("WeatherForecastUnit");
                });

            modelBuilder.Entity("SofomoWeatherForecastAPI.Entities.Location", b =>
                {
                    b.Navigation("WeatherForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
